# modules.translate

from llama_index.core.chat_engine import SimpleChatEngine
from disnake import TextInputStyle, ui, Embed, Color
from llama_index.llms.openai import OpenAI
from llama_index.core import Settings
from disnake.ext import commands
from core import read_config
import asyncio
import disnake

TIMEOUT = 300
TRANSLATE_MODAL_ID = 'translate_modal'
Settings.llm = OpenAI(model='gpt-4o-mini', max_tokens=1000, api_key=read_config().get('OPENAI_API_KEY'))

class TranslateCog(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.slash_command()
    async def translate(self, inter: disnake.ApplicationCommandInteraction):
        await self.show_translate_modal(inter)

    @commands.message_command(name="Translate Message")
    async def translate_message(self, inter: disnake.MessageCommandInteraction):
        message = inter.target.content
        author = inter.target.author.display_name
        await self.show_translate_modal(inter, message, author)

    async def show_translate_modal(self, inter, message=None, author=None):
        components = [
            ui.TextInput(
                label="Target Language",
                placeholder="Enter the target language (e.g., Spanish)",
                custom_id="target_lang",
                style=TextInputStyle.short,
            ),
            ui.TextInput(
                label="Message",
                value=f"{author}: {message}" if message else None,
                placeholder="Enter the message you want to translate" if not message else None,
                custom_id="message",
                style=TextInputStyle.paragraph,
                required=not bool(message)
            )
        ]
        await inter.response.send_modal(
            title="Translate",
            custom_id=TRANSLATE_MODAL_ID,
            components=components,
        )
        try:
            modal_inter = await inter.client.wait_for(
                'modal_submit',
                check=lambda i: i.custom_id == TRANSLATE_MODAL_ID and i.author.id == inter.author.id,
                timeout=TIMEOUT
            )
            message = modal_inter.text_values.get('message', '')
            target_lang = modal_inter.text_values.get('target_lang', '')
            await modal_inter.response.defer()
            chat_engine = SimpleChatEngine.from_defaults(
                system_prompt=f"You are a translator. Translate the following message to {target_lang}. "
                               "Provide only the translated text without any additional explanations.",
                verbose=False
            )
            chat_response = await asyncio.to_thread(
                chat_engine.chat,
                f"Translate this to {target_lang}: {message}"
            )
            if chat_response and chat_response.response:
                translated_text = chat_response.response.strip()
                embed = Embed(
                    title=f"üåê Translation to {target_lang}",
                    color=Color.blue()
                )
                embed.add_field(name="üìù Original", value=f"```{message}```", inline=False)
                embed.add_field(name="üîÑ Translated", value=f"```{translated_text}```", inline=False)
                embed.set_author(name=f"Requested by {inter.author.display_name}", icon_url=inter.author.avatar.url if inter.author.avatar else None)
                embed.set_footer(text="‚ö†Ô∏è This translation was generated by an AI language model and may not be perfectly accurate.")
                await modal_inter.edit_original_response(embed=embed)
            else:
                await modal_inter.edit_original_response(content="‚ùå There was an error processing the translation.")
        except asyncio.TimeoutError:
            await inter.channel.send("‚è∞ The translation request timed out.")

def setup(client):
    client.add_cog(TranslateCog(client))