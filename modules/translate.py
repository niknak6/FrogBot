# modules.translate

from modules.utils.GPT import OpenAIAgent
from disnake import TextInputStyle, ui, Embed, Color
from disnake.ext import commands
import asyncio
import disnake

TIMEOUT = 300
TRANSLATE_MODAL_ID = 'translate_modal'

class TranslateCog(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.slash_command()
    async def translate(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.send_modal(
            title="Translate",
            custom_id=TRANSLATE_MODAL_ID,
            components=[
                ui.TextInput(
                    label="Message",
                    placeholder="Enter the message you want to translate",
                    custom_id="message",
                    style=TextInputStyle.paragraph,
                ),
                ui.TextInput(
                    label="Target Language",
                    placeholder="Enter the target language (e.g., Spanish)",
                    custom_id="target_lang",
                    style=TextInputStyle.single_line,
                ),
            ],
        )

        try:
            modal_inter = await inter.client.wait_for(
                'modal_submit',
                check=lambda i: i.custom_id == TRANSLATE_MODAL_ID and i.author.id == inter.author.id,
                timeout=TIMEOUT
            )

            message = modal_inter.text_values.get('message', '')
            target_lang = modal_inter.text_values.get('target_lang', '')

            await modal_inter.response.defer()

            # Prepare the prompt for the LLM
            system_prompt = (
                f"You are a translator. Translate the following message to {target_lang}. "
                "Provide only the translated text without any additional explanations."
            )

            chat_engine = OpenAIAgent.from_tools(
                [],  # No specific tools needed for translation
                system_prompt=system_prompt,
                verbose=False
            )

            # Send the translation request to the LLM
            chat_response = await asyncio.to_thread(
                chat_engine.chat,
                f"Translate this to {target_lang}: {message}"
            )

            if chat_response and chat_response.response:
                translated_text = chat_response.response.strip()

                # Create the embed
                embed = Embed(
                    title=f"Translation by {inter.author.display_name}",
                    description=translated_text,
                    color=Color.blue()
                )
                embed.add_field(name="Original", value=message, inline=False)
                embed.set_footer(text="This translation was generated by an AI language model and may not be perfectly accurate.")

                # Send the embed as a response to the modal interaction
                await modal_inter.edit_original_response(embed=embed)
            else:
                await modal_inter.edit_original_response(content="There was an error processing the translation.")

        except asyncio.TimeoutError:
            await inter.channel.send("The translation request timed out.")

def setup(client):
    client.add_cog(TranslateCog(client))
